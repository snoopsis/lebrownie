{"ast":null,"code":"var _jsxFileName = \"/home/snoopsis/nodeSites/lebrownie/client/src/context/auth/AuthState.js\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport AuthContext from \"./authContext\";\nimport authReducer from \"./authReducer\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, CLIENT_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS, UPDATE_CLIENT, UPDATE_DADOS, UPDATE_PASSWORD } from \"../types\";\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem(\"token\"),\n    isAuthenticated: null,\n    loading: true,\n    client: \"\",\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Load Cliente\n\n  const loadCliente = async () => {\n    setAuthToken(localStorage.token);\n\n    try {\n      const res = await axios.get(\"/api/auth\");\n      dispatch({\n        type: CLIENT_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; // Registo de Cliente\n\n\n  const register = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/clientes\", formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadCliente();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Login Cliente\n\n\n  const login = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/auth\", formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadCliente();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Update Client\n\n\n  const updateDados = async client => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/clientes/${client._id}`, client, config);\n      dispatch({\n        type: UPDATE_DADOS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update Client Password\n\n\n  const updatePassword = async client => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/clientes/senha/${client._id}`, client, config);\n      dispatch({\n        type: UPDATE_PASSWORD,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update Client\n\n\n  const updateClient = async client => {\n    try {\n      dispatch({\n        type: UPDATE_CLIENT,\n        payload: client\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear Errors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      client: state.client,\n      error: state.error,\n      register,\n      loadCliente,\n      login,\n      logout,\n      clearErrors,\n      updateClient,\n      updateDados,\n      updatePassword\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/home/snoopsis/nodeSites/lebrownie/client/src/context/auth/AuthState.js"],"names":["React","useReducer","axios","AuthContext","authReducer","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","CLIENT_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","UPDATE_CLIENT","UPDATE_DADOS","UPDATE_PASSWORD","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","client","error","state","dispatch","loadCliente","res","get","type","payload","data","err","register","formData","config","headers","post","response","msg","login","updateDados","put","_id","updatePassword","updateClient","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport AuthContext from \"./authContext\";\nimport authReducer from \"./authReducer\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  CLIENT_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS,\n  UPDATE_CLIENT,\n  UPDATE_DADOS,\n  UPDATE_PASSWORD\n} from \"../types\";\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem(\"token\"),\n    isAuthenticated: null,\n    loading: true,\n    client: \"\",\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load Cliente\n  const loadCliente = async () => {\n    setAuthToken(localStorage.token);\n\n    try {\n      const res = await axios.get(\"/api/auth\");\n\n      dispatch({\n        type: CLIENT_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({ type: AUTH_ERROR });\n    }\n  };\n\n  // Registo de Cliente\n  const register = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/clientes\", formData, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n\n      loadCliente();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  // Login Cliente\n  const login = async formData => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/auth\", formData, config);\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n\n      loadCliente();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  // Update Client\n  const updateDados = async client => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(\n        `/api/clientes/${client._id}`,\n        client,\n        config\n      );\n\n      dispatch({\n        type: UPDATE_DADOS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  // Update Client Password\n  const updatePassword = async client => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(\n        `/api/clientes/senha/${client._id}`,\n        client,\n        config\n      );\n\n      dispatch({\n        type: UPDATE_PASSWORD,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  // Update Client\n  const updateClient = async client => {\n    try {\n      dispatch({\n        type: UPDATE_CLIENT,\n        payload: client\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  // Logout\n  const logout = () => dispatch({ type: LOGOUT });\n\n  // Clear Errors\n  const clearErrors = () => dispatch({ type: CLEAR_ERRORS });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n        loading: state.loading,\n        client: state.client,\n        error: state.error,\n        register,\n        loadCliente,\n        login,\n        logout,\n        clearErrors,\n        updateClient,\n        updateDados,\n        updatePassword\n      }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}